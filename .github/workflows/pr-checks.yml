name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  conventional-commits:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR title (Conventional Commits)
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
          scopes: |
            gui
            core
            overlay
            config
            build
            ci
            deps
          requireScope: false
          subjectPattern: ^[a-z].+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            starts with a lowercase character.
          wip: false
          validateSingleCommit: false

      - name: Validate all commits (Conventional Commits)
        uses: wagoid/commitlint-github-action@v6
        with:
          configFile: .commitlintrc.json
          failOnWarnings: false
          helpURL: https://github.com/JoShMiQueL/cookie-clicker-bot/blob/main/CONTRIBUTING.md#commit-guidelines

      - name: Comment on invalid commits
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## ❌ Conventional Commits Validation Failed

              Your PR title or commits don't follow the [Conventional Commits](https://www.conventionalcommits.org/) specification.

              ### Required Format

              **PR Title:**
              \`\`\`
              <type>(<scope>): <description>
              \`\`\`

              **Valid Types:**
              - \`feat\` - New features
              - \`fix\` - Bug fixes
              - \`docs\` - Documentation changes
              - \`style\` - Code style changes (formatting, etc.)
              - \`refactor\` - Code refactoring
              - \`perf\` - Performance improvements
              - \`test\` - Adding or updating tests
              - \`build\` - Build system changes
              - \`ci\` - CI/CD changes
              - \`chore\` - Maintenance tasks

              **Valid Scopes (optional):**
              - \`gui\`, \`core\`, \`overlay\`, \`config\`, \`build\`, \`ci\`, \`deps\`

              ### Examples

              ✅ **Valid:**
              - \`feat: add visual overlay indicator\`
              - \`fix(gui): resolve button alignment\`
              - \`docs: update installation instructions\`
              - \`feat!: change API structure\` (breaking change)

              ❌ **Invalid:**
              - \`Add feature\` (missing type)
              - \`Feat: Add feature\` (type should be lowercase)
              - \`feat: Add feature\` (description should start with lowercase)
              - \`feature: add feature\` (invalid type)

              ### Breaking Changes

              For breaking changes, add \`!\` after the type:
              \`\`\`
              feat!: change config file format
              \`\`\`

              ### Need Help?

              See our [Contributing Guide](https://github.com/JoShMiQueL/cookie-clicker-bot/blob/main/CONTRIBUTING.md#commit-guidelines) for detailed examples.

              ---

              **Please update your PR title and/or commits to follow this format.**`
            });

  conflict-check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Check for merge conflicts
        uses: eps1lon/actions-label-merge-conflict@v3
        with:
          dirtyLabel: 'merge-conflict'
          repoToken: ${{ secrets.GITHUB_TOKEN }}

  branch-check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Check branch name
        uses: deepakputhraya/action-branch-name@master
        with:
          regex: '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|hotfix)\/[a-z0-9-]+$|^(main|develop)$'
          allowed_prefixes: 'feat,fix,docs,style,refactor,perf,test,build,ci,chore,hotfix'
          ignore: main,develop
          min_length: 5

      - name: Comment on invalid branch name
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.payload.pull_request.head.ref;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `⚠️ **Branch naming convention**

              Your branch \`${branch}\` doesn't follow the naming convention.

              **Valid format:** \`type/description\`

              **Valid types:**
              - \`feat/\` - New features
              - \`fix/\` - Bug fixes
              - \`docs/\` - Documentation
              - \`style/\` - Code style
              - \`refactor/\` - Refactoring
              - \`perf/\` - Performance
              - \`test/\` - Tests
              - \`build/\` - Build system
              - \`ci/\` - CI/CD
              - \`chore/\` - Maintenance
              - \`hotfix/\` - Hotfixes

              **Examples:** \`feat/add-new-feature\`, \`fix/button-click\`

              **Rules:**
              - Use lowercase letters, numbers, and hyphens only
              - Minimum 5 characters
              - Format: \`type/description\``
            });

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['invalid-branch-name']
            });

  linked-issue-check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Check for linked issue
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';

            // Check for issue references like #123, fixes #123, closes #123
            const hasIssueReference = /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#\d+/i.test(body) || /#\d+/.test(body);

            // Get existing comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('No linked issue found')
            );

            if (!hasIssueReference && !pr.draft) {
              const commentBody = `ℹ️ **No linked issue found**

              Consider linking this PR to an issue using keywords like:
              - \`Fixes #123\`
              - \`Closes #123\`
              - \`Resolves #123\`

              This helps track the context and purpose of changes.`;

              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: commentBody
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: commentBody
                });
              }

              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['no-issue-linked']
              });
            } else if (hasIssueReference && botComment) {
              // Delete comment if issue was linked
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id
              });

              // Remove label
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: 'no-issue-linked'
                });
              } catch (error) {
                // Label might not exist, ignore error
              }
            }
