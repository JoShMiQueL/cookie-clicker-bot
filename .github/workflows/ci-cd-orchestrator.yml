name: CI/CD Pipeline Orchestrator

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:

# Global environment variables
env:
  PYTHON_VERSION: "3.12"

jobs:
  # 🔍 Phase 1: Code Quality & Validation
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    outputs:
      quality-passed: ${{ steps.quality.outputs.passed }}
    steps:
      - name: Run Code Quality Checks
        id: quality
        uses: ./.github/workflows/quality-checks.yml
        with:
          python-version: ${{ env.PYTHON_VERSION }}

  # 🧪 Phase 2: PR Validation (only on PRs)
  pr-validation:
    name: PR Validation
    if: github.event_name == 'pull_request'
    needs: quality-gate
    runs-on: ubuntu-latest
    outputs:
      pr-approved: ${{ steps.validation.outputs.approved }}
    steps:
      - name: Run PR Validation
        id: validation
        uses: ./.github/workflows/pr-management.yml

  # 🧪 Phase 3: Test Execution (runs on PRs and pushes when quality passes)
  test-execution:
    name: Test Execution
    needs: [quality-gate, pr-validation]
    if: |
      always() &&
      needs.quality-gate.result == 'success' &&
      (needs.pr-validation.result == 'success' || needs.pr-validation.result == 'skipped')
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.tests.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Tests
        id: tests
        run: |
          # TODO: Replace with your actual test commands when tests are implemented
          # pytest tests/ -v --tb=short
          # python -m unittest discover tests/
          # coverage run -m pytest tests/
          # coverage report --fail-under=80

          echo "🧪 Test execution placeholder"
          echo "Tests will be implemented here"
          echo "passed=true" >> $GITHUB_OUTPUT

  # 📊 Phase 4: Report & Notify (always run for feedback)
  report:
    name: Generate Report
    needs: [quality-gate, pr-validation, test-execution]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Pipeline Report
        uses: ./.github/workflows/pipeline-report.yml
        with:
          quality-result: ${{ needs.quality-gate.result }}
          pr-result: ${{ needs.pr-validation.result }}
          test-result: ${{ needs.test-execution.result }}
          tests-passed: ${{ needs.test-execution.outputs.tests-passed }}
