name: CI Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Stage 1: Code Quality Checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  # Stage 1: PR Validation (only on PRs)
  pr-checks:
    name: PR Validation
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
          requireScope: false
          subjectPattern: ^[a-z].+$
          wip: false

      - name: Check branch name
        uses: deepakputhraya/action-branch-name@master
        with:
          regex: '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|hotfix)\/[a-z0-9-]+$|^(main|develop)$'
          allowed_prefixes: 'feat,fix,docs,style,refactor,perf,test,build,ci,chore,hotfix'
          ignore: main,develop
          min_length: 5

  # Stage 2: Build (only if all checks pass)
  build:
    name: Build Executable
    needs: [lint, pr-checks]
    if: |
      always() &&
      needs.lint.result == 'success' &&
      (needs.pr-checks.result == 'success' || needs.pr-checks.result == 'skipped')
    runs-on: windows-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Build executable
        run: |
          pyinstaller CookieClickerBot.spec

      - name: Get executable size
        id: size
        shell: pwsh
        run: |
          $size = (Get-Item "dist\CookieClickerBot.exe").Length
          $sizeMB = [math]::Round($size / 1MB, 2)
          echo "size_bytes=$size" >> $env:GITHUB_OUTPUT
          echo "size_mb=$sizeMB" >> $env:GITHUB_OUTPUT
          echo "Executable size: $sizeMB MB"

      - name: Calculate checksum
        id: checksum
        shell: pwsh
        run: |
          $hash = (Get-FileHash "dist\CookieClickerBot.exe" -Algorithm SHA256).Hash
          echo "sha256=$hash" >> $env:GITHUB_OUTPUT
          echo "SHA256: $hash"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: CookieClickerBot-${{ github.sha }}
          path: dist/CookieClickerBot.exe
          retention-days: 30

      - name: Create build info
        shell: pwsh
        run: |
          @"
          Build Information
          ==================
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Size: ${{ steps.size.outputs.size_mb }} MB
          SHA256: ${{ steps.checksum.outputs.sha256 }}
          "@ | Out-File -FilePath dist/BUILD_INFO.txt

      - name: Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: build-info-${{ github.sha }}
          path: dist/BUILD_INFO.txt
          retention-days: 30

      - name: Comment PR with build info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const size = '${{ steps.size.outputs.size_mb }}';
            const sha = '${{ steps.checksum.outputs.sha256 }}';

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('ðŸ”¨ Build Successful')
            );

            const body = [
              '## ðŸ”¨ Build Successful',
              '',
              `**Executable Size:** ${size} MB`,
              `**SHA256:** \`${sha.substring(0, 16)}...\``,
              '',
              'Download the artifact from the workflow run to test.'
            ].join('\n');

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
