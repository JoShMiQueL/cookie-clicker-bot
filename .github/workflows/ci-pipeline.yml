name: CI Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Stage 1: Code Quality Checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  # Stage 1: PR Validation (only on PRs)
  pr-checks:
    name: PR Validation
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
          requireScope: false
          subjectPattern: ^[a-z].+$
          wip: false

      - name: Check branch name
        uses: deepakputhraya/action-branch-name@master
        with:
          regex: '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|hotfix)\/[a-z0-9-]+$|^(main|develop)$'
          allowed_prefixes: 'feat,fix,docs,style,refactor,perf,test,build,ci,chore,hotfix'
          ignore: main,develop
          min_length: 5

  # Stage 2: Build (only if all checks pass)
  build:
    needs: [lint, pr-checks]
    if: |
      always() &&
      needs.lint.result == 'success' &&
      (needs.pr-checks.result == 'success' || needs.pr-checks.result == 'skipped')
    uses: ./.github/workflows/build-executable.yml
    permissions:
      contents: read

  # Comment on PR with build info
  comment-pr:
    name: Comment PR
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Comment PR with build info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const size = '${{ needs.build.outputs.size-mb }}';
            const sha = '${{ needs.build.outputs.checksum }}';

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('ðŸ”¨ Build Successful')
            );

            const body = [
              '## ðŸ”¨ Build Successful',
              '',
              `**Executable Size:** ${size} MB`,
              `**SHA256:** \`${sha.substring(0, 16)}...\``,
              '',
              'Download the artifact from the workflow run to test.'
            ].join('\n');

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
