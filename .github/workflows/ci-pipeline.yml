name: CI Pipeline

on:
  pull_request:
    branches: [main, develop]
    # Permitir que el workflow se ejecute en PRs de forks
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to run tests with'
        required: false
        default: '3.12'

jobs:
  # Stage 1: Code Quality Checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/pyproject.toml'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test,dev]

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files --show-diff-on-failure

    strategy:
      matrix:
        python-version: ['3.12']

  # Stage 2: Run Tests
  test:
    name: Test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    # Add concurrency control to cancel previous runs on new push
    concurrency:
      group: test-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/pyproject.toml'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Run tests with coverage
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
          python -m coverage report --fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          verbose: true

  # Stage 3: PR Validation (only on PRs)
  pr-checks:
    name: PR Validation
    if: github.event_name == 'pull_request'
    needs: [lint, test]  # Ensure this runs after lint and test jobs
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Verificar que todos los jobs requeridos hayan pasado
      - name: Check test results
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "::error::One or more checks failed. Please check the 'Checks' tab for details."
          exit 1

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
          requireScope: false
          subjectPattern: ^[a-z].+$
          wip: false

      - name: Check branch name
        uses: deepakputhraya/action-branch-name@master
        with:
          regex: '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|hotfix)\/[a-z0-9-]+$|^(main|develop)$'
          allowed_prefixes: 'feat,fix,docs,style,refactor,perf,test,build,ci,chore,hotfix'
          ignore: main,develop
          min_length: 5

  # Stage 2: Build (only if all checks pass)
  build:
    needs: [lint, pr-checks]
    if: |
      always() &&
      needs.lint.result == 'success' &&
      (needs.pr-checks.result == 'success' || needs.pr-checks.result == 'skipped')
    uses: ./.github/workflows/build-executable.yml
    permissions:
      contents: read

  # Comment on PR with build info
  comment-pr:
    name: Comment PR
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Comment PR with build info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const size = '${{ needs.build.outputs.size-mb }}';
            const sha = '${{ needs.build.outputs.checksum }}';

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('ðŸ”¨ Build Successful')
            );

            const body = [
              '## ðŸ”¨ Build Successful',
              '',
              `**Executable Size:** ${size} MB`,
              `**SHA256:** \`${sha.substring(0, 16)}...\``,
              '',
              'Download the artifact from the workflow run to test.'
            ].join('\n');

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
