name: Release

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - auto      # Automatic based on conventional commits
          - patch     # Bug fixes (1.0.0 -> 1.0.1)
          - minor     # New features (1.0.0 -> 1.1.0)
          - major     # Breaking changes (1.0.0 -> 2.0.0)
          - prerelease-beta
          - prerelease-alpha
          - prerelease-rc
        default: auto
      custom-version:
        description: 'Custom version (optional, overrides release-type)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      new-tag: ${{ steps.version.outputs.new_tag }}
      new-version: ${{ steps.version.outputs.new_version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate next version
        id: version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ github.event.inputs.release-type == 'auto' && 'patch' || github.event.inputs.release-type }}
          custom_tag: ${{ github.event.inputs.custom-version }}
          release_branches: main
          pre_release_branches: develop
          append_to_pre_release_tag: ${{ contains(github.event.inputs.release-type, 'beta') && 'beta' || contains(github.event.inputs.release-type, 'alpha') && 'alpha' || contains(github.event.inputs.release-type, 'rc') && 'rc' || '' }}
          dry_run: false

      - name: Update pyproject.toml version
        shell: bash
        run: |
          new_version="${{ steps.version.outputs.new_version }}"
          sed -i "s/^version = .*/version = \"$new_version\"/" pyproject.toml

          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add pyproject.toml
          git commit -m "chore: bump version to $new_version"
          git push

  build:
    needs: prepare-release
    uses: ./.github/workflows/build-executable.yml

  release:
    needs: [prepare-release, build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: CookieClickerBot-${{ github.sha }}
          path: dist/

      - name: Create checksum file
        shell: bash
        run: |
          echo "${{ needs.build.outputs.checksum }}" > dist/CookieClickerBot.exe.sha256

      - name: Generate changelog
        id: changelog
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: --latest --strip header
        env:
          OUTPUT: CHANGELOG_RELEASE.md
      - name: Determine release type
        id: release_type
        shell: bash
        run: |
          tag="${{ needs.prepare-release.outputs.new-tag }}"

          # Check if it's a pre-release version
          if [[ "$tag" =~ -beta ]]; then
            echo "type=beta" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "name=Beta Release $tag" >> $GITHUB_OUTPUT
          elif [[ "$tag" =~ -alpha ]]; then
            echo "type=alpha" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "name=Alpha Release $tag" >> $GITHUB_OUTPUT
          elif [[ "$tag" =~ -rc ]]; then
            echo "type=rc" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "name=Release Candidate $tag" >> $GITHUB_OUTPUT
          else
            echo "type=release" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "name=Release $tag" >> $GITHUB_OUTPUT
          fi

          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        shell: pwsh
        run: |
          $type = "${{ steps.release_type.outputs.type }}"
          $sha = "${{ needs.build.outputs.checksum }}"

          $badge = switch ($type) {
            "release" { "üöÄ" }
            "beta" { "üß™" }
            "alpha" { "‚öóÔ∏è" }
            "rc" { "üéØ" }
            default { "üì¶" }
          }

          $warning = ""
          if ("${{ steps.release_type.outputs.prerelease }}" -eq "true") {
            $warning = "> ‚ö†Ô∏è **Pre-release Version**`n> This is a pre-release version and may contain bugs or incomplete features.`n> Use at your own risk. For stable releases, use the latest non-pre-release version.`n"
          }

          $body = @"
          ## $badge ${{ steps.release_type.outputs.name }}
          $warning

          **Release Type:** ``$type``
          **SHA256:** ``$sha``

          ### üì• Installation
          1. Download ``CookieClickerBot.exe``
          2. Run the executable
          3. No installation required!

          ### ‚úÖ Verification
          Verify the integrity of the downloaded file:

          **PowerShell:**
          ``````powershell
          (Get-FileHash CookieClickerBot.exe -Algorithm SHA256).Hash -eq "$sha"
          ``````

          **Command Prompt:**
          ``````cmd
          certutil -hashfile CookieClickerBot.exe SHA256
          ``````

          ### üìù What's Changed

          "@

          # Combine release notes with changelog
          $body | Out-File -FilePath release_notes.md -Encoding utf8
          if (Test-Path CHANGELOG_RELEASE.md) {
            Get-Content CHANGELOG_RELEASE.md | Add-Content release_notes.md -Encoding utf8
          }

          # Add footer
          @"

          ---

          **Full Changelog:** https://github.com/${{ github.repository }}/releases/tag/${{ steps.release_type.outputs.tag }}
          "@ | Add-Content release_notes.md -Encoding utf8

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_type.outputs.tag || github.ref_name }}
          name: ${{ steps.release_type.outputs.name }}
          prerelease: ${{ steps.release_type.outputs.prerelease }}
          body_path: release_notes.md
          files: |
            dist/CookieClickerBot.exe
            dist/CookieClickerBot.exe.sha256
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release tag
        if: steps.release_type.outputs.type == 'release'
        shell: pwsh
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

          # Update or create 'latest' tag
          git tag -f latest
          git push -f origin latest
