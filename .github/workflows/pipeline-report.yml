name: Pipeline Report

on:
  workflow_call:
    inputs:
      quality-result:
        description: 'Result of quality checks'
        type: string
      pr-result:
        description: 'Result of PR validation'
        type: string
      test-result:
        description: 'Result of test execution'
        type: string
      tests-passed:
        description: 'Whether tests passed'
        type: string

jobs:
  generate-report:
    name: Generate Pipeline Report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Generate status summary
        id: summary
        run: |
          quality="${{ inputs.quality-result }}"
          pr="${{ inputs.pr-result }}"
          test="${{ inputs.test-result }}"

          # Calculate overall status
          if [ "$quality" = "success" ] && [ "$pr" != "failure" ] && [ "$test" != "failure" ]; then
            overall="✅ Pipeline Successful"
            color="green"
          elif [ "$quality" = "failure" ]; then
            overall="❌ Pipeline Failed: Quality Issues"
            color="red"
          elif [ "$pr" = "failure" ]; then
            overall="❌ Pipeline Failed: PR Validation Issues"
            color="red"
          elif [ "$test" = "failure" ]; then
            overall="❌ Pipeline Failed: Test Issues"
            color="red"
          else
            overall="⚠️ Pipeline Completed with Issues"
            color="yellow"
          fi

          echo "overall=$overall" >> $GITHUB_OUTPUT
          echo "color=$color" >> $GITHUB_OUTPUT

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const quality = '${{ inputs.quality-result }}';
            const pr = '${{ inputs.pr-result }}';
            const test = '${{ inputs.test-result }}';
            const testsPassed = '${{ inputs.tests-passed }}';

            // Calculate overall status
            let overall = '✅ Pipeline Successful';
            if (quality === 'failure') overall = '❌ Pipeline Failed: Quality Issues';
            else if (pr === 'failure') overall = '❌ Pipeline Failed: PR Validation Issues';
            else if (test === 'failure') overall = '❌ Pipeline Failed: Test Issues';

            const body = '## 🚀 CI/CD Pipeline Report\n\n' +
              '### ' + overall + '\n\n' +
              '| Stage | Status | Details |\n' +
              '|-------|--------|---------|\n' +
              '| 🔍 Code Quality | ' + (quality === 'success' ? '✅ Passed' : '❌ Failed') + ' | Linting, formatting, security checks |\n' +
              '| 🧪 PR Validation | ' + (pr === 'success' ? '✅ Passed' : pr === 'failure' ? '❌ Failed' : '⏭️ Skipped') + ' | Conventional commits, naming, conflicts |\n' +
              '| 🧪 Test Execution | ' + (test === 'success' ? '✅ Passed' : test === 'failure' ? '❌ Failed' : '⏭️ Skipped') + ' | Test suite execution |\n\n' +
              '---\n\n' +
              '*Report generated by CI/CD Orchestrator*';

            // Find existing bot comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🚀 CI/CD Pipeline Report')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

      - name: Log pipeline summary
        run: |
          echo "::group::📊 Pipeline Summary"
          echo "Quality Checks: ${{ inputs.quality-result }}"
          echo "PR Validation: ${{ inputs.pr-result }}"
          echo "Test Execution: ${{ inputs.test-result }}"
          if [ -n "${{ inputs.tests-passed }}" ]; then
            echo "Tests Passed: ${{ inputs.tests-passed }}"
          fi
          echo "::endgroup::"
