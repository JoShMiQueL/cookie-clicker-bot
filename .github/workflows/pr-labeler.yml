name: PR Labeler

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  label-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Label by size
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/xs'
          xs_max_size: 10
          s_label: 'size/s'
          s_max_size: 100
          m_label: 'size/m'
          m_max_size: 500
          l_label: 'size/l'
          l_max_size: 1000
          xl_label: 'size/xl'
          fail_if_xl: false

      - name: Label by files
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml

      - name: Label by conventional commit
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title.toLowerCase();

            const labels = [];

            // Conventional commit types
            if (title.startsWith('feat:') || title.startsWith('feat(')) {
              labels.push('type/feature');
            } else if (title.startsWith('fix:') || title.startsWith('fix(')) {
              labels.push('type/bug');
            } else if (title.startsWith('docs:') || title.startsWith('docs(')) {
              labels.push('type/documentation');
            } else if (title.startsWith('style:') || title.startsWith('style(')) {
              labels.push('type/style');
            } else if (title.startsWith('refactor:') || title.startsWith('refactor(')) {
              labels.push('type/refactor');
            } else if (title.startsWith('perf:') || title.startsWith('perf(')) {
              labels.push('type/performance');
            } else if (title.startsWith('test:') || title.startsWith('test(')) {
              labels.push('type/test');
            } else if (title.startsWith('chore:') || title.startsWith('chore(')) {
              labels.push('type/chore');
            } else if (title.startsWith('ci:') || title.startsWith('ci(')) {
              labels.push('type/ci');
            } else if (title.startsWith('build:') || title.startsWith('build(')) {
              labels.push('type/build');
            }

            // Breaking changes
            if (title.includes('!:') || pr.body?.includes('BREAKING CHANGE')) {
              labels.push('breaking-change');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: labels
              });
            }

      - name: Check PR description
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;

            if (!pr.body || pr.body.trim().length < 10) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['needs-description']
              });

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '⚠️ This PR needs a description. Please add details about what changes were made and why.'
              });
            }
